{ config, pkgs, ... }:

{


  # --------------------------------------------------------------------
  # 2. NETWORKING & FIREWALL
  # --------------------------------------------------------------------
  networking.firewall = {
    # Allow public traffic for the web proxy and game servers.
    allowedTCPPorts = [
      80   # For HTTP -> HTTPS redirect
      443  # For Nginx HTTPS
      8080 # Wings Telemetry
      2022  # Wings SFTP
    ];
    # You may need to open UDP ports for game servers here as well.
    # allowedUDPPorts = [ 25565 ];
  };

  # --------------------------------------------------------------------
  # 3. SSL CERTIFICATE MANAGEMENT (ACME)
  # --------------------------------------------------------------------
  # This section handles automatic SSL certificate generation and renewal
  # using Let's Encrypt via Cloudflare's DNS for validation.
  security.acme = {
    acceptTerms = true;
    defaults.email = "luna@craftcat.dev"; # For renewal notices

    certs."panel.internal.craftcat.dev" = {
      # Use Cloudflare for DNS-01 validation challenge.
      dnsProvider = "cloudflare";
      # Provide the API token via the agenix-decrypted secret file.
      environmentFile = config.age.secrets."cloudflare".path;
      # Ensure the Nginx user can read the generated certificate files.
      group = "nginx";
    };
  };

  # --------------------------------------------------------------------
  # 4. NGINX REVERSE PROXY
  # --------------------------------------------------------------------
  # Nginx will handle all incoming web traffic, terminate SSL, and
  # proxy requests to the correct backend container.
  services.nginx = {
    enable = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;

    virtualHosts."panel.internal.craftcat.dev" = {
      forceSSL = true; # Automatically redirect HTTP traffic to HTTPS.

      # Use the certificate generated by the ACME module above.
      sslCertificate = "${config.security.acme.certs."panel.internal.craftcat.dev".directory}/fullchain.pem";
      sslCertificateKey = "${config.security.acme.certs."panel.internal.craftcat.dev".directory}/key.pem";

      locations."/" = {
        # Pass all requests to the Pyrodactyl panel container.
        proxyPass = "http://127.0.0.1:8081";
        # Required for the panel's real-time console to function.
        proxyWebsockets = true;
        # Set headers to pass correct information to the backend.
        extraConfig = ''
            add_header Host $host;
            add_header X-Real-IP $remote_addr;
            add_header X-Forwarded-For $proxy_add_x_forwarded_for;
            add_header X-Forwarded-Proto $scheme;
        '';
      };
    };
  };

  # --------------------------------------------------------------------
  # 5. DOCKER & CONTAINER DEFINITIONS
  # --------------------------------------------------------------------
  # Enable Docker, which is required for running the containers.
  virtualisation.docker.enable = true;

  # Declaratively define all containers needed for the Pterodactyl stack.
  virtualisation.oci-containers.containers = {

    # -- Database Container --
    pyro-database = {
      image = "mariadb:10.5";
      ports = ["3306:3306"];
      volumes = [ "/srv/pyrodactyl/database:/var/lib/mysql" ];
      # Load database credentials securely from the agenix-decrypted file.
      environmentFiles = [ config.age.secrets."pyrodactyl-db".path ];
    };

    # -- Cache Container --
    pyro-cache = {
      ports = ["6379:6379"];
      image = "redis:alpine";
    };

    # -- Pyrodactyl Panel Container --
    pyro-panel = {
      image = "ghcr.io/pyrohost/pyrodactyl:main";
      dependsOn = [ "pyro-database" "pyro-cache" ];
      # Expose the panel's port 80 only to the host on port 8081 for Nginx.
      ports = [ "127.0.0.1:8081:80" ];
      volumes = [
        "/srv/pyrodactyl/var:/app/var"
        "/srv/pyrodactyl/nginx:/etc/nginx/http.d"
        "/srv/pyrodactyl/certs:/etc/letsencrypt"
        "/srv/pyrodactyl/logs:/app/storage/logs"
      ];
      extraOptions = [
        "--dns=192.168.2.3" #TODO: remove me after setting up full dns chain
      ];
      # Load panel configuration from the agenix-decrypted file.
      environmentFiles = [ config.age.secrets."pyrodactyl-panel".path ];
    };

    # -- Pterodactyl Wings Container --
    wings = {
      image = "ghcr.io/pterodactyl/wings:latest";
      # We are now using port mappings instead of host networking to match the compose file.
      ports = [ "8080:8080" "2022:2022" ];
      environment = {
        # These variables are good for consistency with the official compose file.
        TZ = "America/Toronto";
        WINGS_UID = "988";
        WINGS_GID = "988";
        WINGS_USERNAME = "pterodactyl";
      };
      extraOptions = [
        "--dns=192.168.2.3" #TODO: remove me after setting up full dns chain
      ];
      volumes = [
        "/run/podman/podman.sock:/var/run/docker.sock"
        # This volume is important for Wings to inspect other containers.
        "/var/lib/containers/:/var/lib/docker/containers/"
        # Mount the decrypted wings config directly into the container.
        "${config.age.secrets."wings-config".path}:/etc/pterodactyl/config.yml"
        "/var/lib/pterodactyl:/var/lib/pterodactyl"
        # Adding log and temp directories for better debugging and operation.
        "/var/log/pterodactyl/:/var/log/pterodactyl/"
        "/tmp/pterodactyl/:/tmp/pterodactyl/"
        # This provides the container with the host's trusted SSL certificates.
        "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt:/etc/ssl/certs/ca-certificates.crt:ro"

        # This mounts the ACME certs into a 'certs' subdirectory inside the container.
        "${config.security.acme.certs."panel.internal.craftcat.dev".directory}:/etc/pterodactyl/certs:ro"
      ];
    };
    playit-agent = {
      image = "ghcr.io/playit-cloud/playit-agent:0.15";
      extraOptions = [
        "--net=host"
      ];
      environmentFiles = [ config.age.secrets."playit-tunnel".path ];
    };
  };

}

